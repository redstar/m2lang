//===--- Diagnostic.def - Modula-2 Diagnostic Messages ----------*- C++ -*-===//
//
// Part of the M2Lang Project, under the Apache License v2.0 with
// LLVM Exceptions. See LICENSE file for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef DIAG
#define DIAG(X,Y,Z)
#endif

// Messages from Lexer
DIAG(err_unterminated_block_comment, Error, "unterminated (* comment")
DIAG(err_unterminated_directive, Error, "unterminated <* directive")
DIAG(err_unterminated_char_or_string, Error, "missing terminating character")
DIAG(err_exponent_has_no_digits, Error, "exponent has no digits")
DIAG(err_non_octal_digit_in_number, Error, "octal number has non-octal digits")
DIAG(err_non_octal_digit_in_char, Error, "char literal has non-octal digits")
DIAG(err_hex_digit_in_decimal, Error, "decimal number contains hex digit")
DIAG(err_not_allowed_in_r10, Error, "symbol not allowed in R10")
DIAG(err_requires_iso, Error, "symbol only allowed in ISO")

// Messages from Preprocessor
DIAG(err_unexpected_elseif_in_directive, Error, "unexpected ELSIF in directive")
DIAG(err_unexpected_else_in_directive, Error, "unexpected ELSE in directive")
DIAG(err_unexpected_end_in_directive, Error, "unexpected END in directive")
DIAG(warn_version_tag_not_found, Warning, "version tag %0 not found, assuming FALSE")

// Messages from Parser
DIAG(err_expected, Error, "expected %0 but found %1")
DIAG(err_unexpected_symbol, Error, "unexpected symbol")

// Messages from Sema
DIAG(err_symbol_already_declared, Error, "symbol %0 is already declared in this scope")
DIAG(note_symbol_already_declared, Note, "symbol %0 was already declared here")
DIAG(err_module_identifier_not_equal, Error, "module identifier at begin and end not equal - expected %0 but found %1")
DIAG(err_proc_identifier_not_equal, Error, "procedure identifier at begin and end not equal - expected %0 but found %1")
DIAG(err_symbol_not_declared, Error, "symbol %0 is not declared")
DIAG(err_type_expected, Error, "type expected")
DIAG(err_ordinal_type_expected, Error, "ordinal type expected")

DIAG(err_symbol_already_in_export_list, Error, "symbol %0 already appeared in the export list")
DIAG(note_symbol_already_in_export_list, Note, "symbol %0 appeared here in the export list")
DIAG(err_exported_symbol_undeclared, Error, "exported symbol %0 is not declared in module %1")

DIAG(err_symbol_already_in_import_list, Error, "symbol %0 already appeared in the import list")
DIAG(note_symbol_already_in_import_list, Note, "symbol %0 appeared here in the import list")
DIAG(err_imported_symbol_undeclared, Error, "imported symbol %0 is not declared in module %1")

DIAG(warn_ambigous_negation, Warning, "Negation is ambigous. Please consider using parenthesis.")

DIAG(err_module_requires_simple_return, Error, "Only simple RETURN allowed in module block")
DIAG(err_procedure_requires_simple_return, Error, "Only simple RETURN allowed in proper procedure")
DIAG(err_function_requires_return_expression, Error, "RETURN in function requires expression")

DIAG(err_not_requires_boolean_expression, Error, "NOT requires a boolean expression")
DIAG(err_condition_requires_boolean_expression, Error, "condition requires a boolean expression")
DIAG(err_expressions_are_not_compatible, Error, "left and right expression are not compatible")
DIAG(err_expressions_are_not_assignable, Error, "left and right expression are not assignable")
DIAG(err_ordinal_expressions_required, Error, "expression must be of ordinal type")
DIAG(err_simple_variable_required, Error, "identifier must be simple variable")
DIAG(err_whole_number_type_required, Error, "whole number type required")
DIAG(err_constant_expected, Error, "constant expected")

#undef DIAG