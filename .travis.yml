dist: focal
language: cpp

jobs:
  include:
    - os: linux
      env: LLVM_VERSION=10.0.0
      compiler: gcc
      arch: amd64
    - os: linux
      env: LLVM_VERSION=9.0.0
      compiler: gcc
      arch: amd64
    - os: linux
      env: LLVM_VERSION=10.0.0
      compiler: gcc
      arch: s390x
    - os: linux
      env: LLVM_VERSION=10.0.1
      compiler: gcc
      arch: ppc64le
    - os: linux
      env: LLVM_VERSION=10.0.0
      compiler: gcc
      arch: arm64-graviton2
    - os: osx
      osx_image: xcode9.4
      env: LLVM_VERSION=9.0.1
    - os: osx
      osx_image: xcode10.1
      env: LLVM_VERSION=10.0.0
    - os: windows
      env: LLVM_VERSION=10.0.0
  allow_failures:
    - os: windows

cache:
  directories:
    - distpackages

addons:
  apt:
    packages:
    - ninja-build
    - llvm-10-dev
    - llvm-10-tools
    - libclang-common-10-dev

before_install:
  - export DISTPACKAGES=$PWD/distpackages
  - mkdir -p $DISTPACKAGES
  # Should be part of addons
  - |
    if [ "${TRAVIS_OS_NAME}" == "windows" ]; then
      choco install visualstudio2019community visualstudio2019-workload-nativedesktop ninja python pip
      export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
      ./scripts/vcenv.bat | sed -e 's/\\/\//g' -e 's/C:/\/c/g' -e 's/;/:/g' > /tmp/vcenv.sh
      source /tmp/vcenv.sh
      export CC=cl.exe
      export CXX=cl.exe
      export PYTHON="/c/Python38/python.exe"
      export PIP="/c/Python38/Scripts/pip.exe"
    else
      if [ "$TRAVIS_CPU_ARCH" == "amd64" ]; then pyenv global system 3.6; fi
      export PYTHON="$(which python3)"
      export PIP="$(which pip3)"
    fi
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      wget -O ninja-mac.zip https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip
      mkdir ninja
      tar -xf ninja-mac.zip -C ninja
      rm ninja-mac.zip
      export PATH="$PWD/ninja:$PATH"
    fi

install:
  - |
    export LLVM_ROOT_DIR="$PWD/llvm"
    mkdir -p $LLVM_ROOT_DIR
    if  [ "${TRAVIS_OS_NAME}" == "windows" ]; then
      export LLVMDIST_FILE=llvm-$LLVM_VERSION-windows-x64.7z
      export LLVMDIST_URL=https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/$LLVMDIST_FILE
      if [ ! -e "$DISTPACKAGES/$LLVMDIST_FILE" ]; then
        wget -O $DISTPACKAGES/$LLVMDIST_FILE $LLVMDIST_URL
      fi
      7z x $DISTPACKAGES/$LLVMDIST_FILE -o$LLVM_ROOT_DIR
      export CMAKE_EXTRA_ARGS="-DCMAKE_BUILD_TYPE=Release"
    elif [ "$TRAVIS_CPU_ARCH" != "s390x" ]; then
      if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        if [ "$TRAVIS_CPU_ARCH" == "ppc64le" ]; then
          export LLVM_ARCH="powerpc64le-linux-ubuntu-16.04"
        elif [ "$TRAVIS_CPU_ARCH" == "arm64" ]; then
          export LLVM_ARCH="aarch64-linux-gnu"
        else
          if [ "$LLVM_VERSION" == "9.0.0" -o "$LLVM_VERSION" == "10.0.0" -o "$LLVM_VERSION" == "10.0.1" ]; then
          export LLVM_ARCH="x86_64-linux-gnu-ubuntu-18.04"
          else
            export LLVM_ARCH="x86_64-linux-gnu-ubuntu-20.04"
          fi
        fi
      else
        export LLVM_ARCH="x86_64-apple-darwin"
      fi
      export LLVMDIST_FILE=clang+llvm-$LLVM_VERSION-${LLVM_ARCH}.tar.xz
      if [ "$LLVM_VERSION" == "9.0.0" ]; then
        export LLVMDIST_URL=http://releases.llvm.org/$LLVM_VERSION/$LLVMDIST_FILE
      else
        export LLVMDIST_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/$LLVMDIST_FILE
      fi
      if [ ! -e "$DISTPACKAGES/$LLVMDIST_FILE" ]; then
        wget -O $DISTPACKAGES/$LLVMDIST_FILE $LLVMDIST_URL
      fi
      tar -xf $DISTPACKAGES/$LLVMDIST_FILE --strip 1 -C $LLVM_ROOT_DIR
    fi
  - |
    if [ "$TRAVIS_CPU_ARCH" == "s390x" ]; then
      export LLVM_CMAKE_DIR="$(llvm-config-10 --cmakedir)"
    else
      export LLVM_CMAKE_DIR="$($LLVM_ROOT_DIR/bin/llvm-config --cmakedir)"
    fi
  - echo $LLVM_CMAKE_DIR
  - $PIP install --user lit
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then ld --version; fi
  - cmake --version
  - ninja --version
  - $PYTHON --version
  - $PYTHON -c "import lit; lit.main();" --version . | head -n 1

script:
  # Invoke CMake to generate the Ninja build files.
  - export SRC_DIR="$PWD"
  - mkdir ../build && cd ../build
  - cmake -G Ninja -DLLVM_CMAKE_PATH=$LLVM_CMAKE_DIR -DPYTHON_EXECUTABLE=$PYTHON ${CMAKE_EXTRA_ARGS} ${SRC_DIR}
  - ninja -j3 LLtool m2lang
  - bin/m2lang --version
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then ninja check-all; fi
